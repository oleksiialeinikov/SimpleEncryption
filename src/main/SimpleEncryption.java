package main;



import java.awt.Container;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import org.jfree.chart.ChartPanel;

/**
 *
 * @author user
 */
public class SimpleEncryption extends javax.swing.JFrame {

    /**
     * Creates new form SimpleEncryption
     */
    public SimpleEncryption() throws IOException {
        initComponents();
        
        setIcon();    
        splitPane.setOneTouchExpandable(true);
        splitPane.setDividerLocation(0.5);
        splitPane.setResizeWeight(0.5);   
               
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        inputScrollPane = new javax.swing.JScrollPane();
        inputTextField = new javax.swing.JTextPane();
        outputScrollPane = new javax.swing.JScrollPane();
        outputTextField = new javax.swing.JTextPane();
        mainMenu = new javax.swing.JMenuBar();
        menu = new javax.swing.JMenu();
        encodeDecodeMenu = new javax.swing.JMenu();
        caesarMenuItem = new javax.swing.JMenuItem();
        vigenereMenuItem = new javax.swing.JMenuItem();
        decodeMenu = new javax.swing.JMenu();
        frequencyAnalasysMenuItem = new javax.swing.JMenuItem();
        frequencyAnalasysCaesarMenuItem = new javax.swing.JMenuItem();
        vigenereKeyLengthMenuItem = new javax.swing.JMenuItem();
        charFrequencyMenu = new javax.swing.JMenu();
        inputMenuItem = new javax.swing.JMenuItem();
        outputMenuItem = new javax.swing.JMenuItem();
        bothMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        textMenu = new javax.swing.JMenu();
        loadFromFileMenuItem = new javax.swing.JMenuItem();
        saveToFileMenu = new javax.swing.JMenu();
        saveInputMenuItem = new javax.swing.JMenuItem();
        saveOutputMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SimpleEncryption");
        setIconImages(null);

        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        inputScrollPane.setViewportView(inputTextField);

        splitPane.setLeftComponent(inputScrollPane);

        outputTextField.setEditable(false);
        outputScrollPane.setViewportView(outputTextField);

        splitPane.setBottomComponent(outputScrollPane);

        menu.setText("Menu");

        encodeDecodeMenu.setText("Encode/Decode");

        caesarMenuItem.setText("Caesar");
        caesarMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caesarMenuItemActionPerformed(evt);
            }
        });
        encodeDecodeMenu.add(caesarMenuItem);

        vigenereMenuItem.setText("Vigenere ");
        vigenereMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vigenereMenuItemActionPerformed(evt);
            }
        });
        encodeDecodeMenu.add(vigenereMenuItem);

        menu.add(encodeDecodeMenu);

        decodeMenu.setText("Decode");

        frequencyAnalasysMenuItem.setText("Frequency analysis");
        frequencyAnalasysMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frequencyAnalasysMenuItemActionPerformed(evt);
            }
        });
        decodeMenu.add(frequencyAnalasysMenuItem);

        frequencyAnalasysCaesarMenuItem.setText("Frequency analasys(Caesar)");
        frequencyAnalasysCaesarMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frequencyAnalasysCaesarMenuItemActionPerformed(evt);
            }
        });
        decodeMenu.add(frequencyAnalasysCaesarMenuItem);

        vigenereKeyLengthMenuItem.setText("Vigenere key length");
        vigenereKeyLengthMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vigenereKeyLengthMenuItemActionPerformed(evt);
            }
        });
        decodeMenu.add(vigenereKeyLengthMenuItem);

        menu.add(decodeMenu);

        charFrequencyMenu.setText("Char Frequency");

        inputMenuItem.setText("Input");
        inputMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputMenuItemActionPerformed(evt);
            }
        });
        charFrequencyMenu.add(inputMenuItem);

        outputMenuItem.setText("Output");
        outputMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputMenuItemActionPerformed(evt);
            }
        });
        charFrequencyMenu.add(outputMenuItem);

        bothMenuItem.setText("Both");
        bothMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bothMenuItemActionPerformed(evt);
            }
        });
        charFrequencyMenu.add(bothMenuItem);

        menu.add(charFrequencyMenu);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        menu.add(exitMenuItem);

        mainMenu.add(menu);

        textMenu.setText("Text");

        loadFromFileMenuItem.setText("Load from file");
        loadFromFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFromFileMenuItemActionPerformed(evt);
            }
        });
        textMenu.add(loadFromFileMenuItem);

        saveToFileMenu.setText("SaveToFile");

        saveInputMenuItem.setText("Input");
        saveInputMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveInputMenuItemActionPerformed(evt);
            }
        });
        saveToFileMenu.add(saveInputMenuItem);

        saveOutputMenuItem.setText("Output");
        saveOutputMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveOutputMenuItemActionPerformed(evt);
            }
        });
        saveToFileMenu.add(saveOutputMenuItem);

        textMenu.add(saveToFileMenu);

        mainMenu.add(textMenu);

        setJMenuBar(mainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1338, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(splitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 937, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void vigenereMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vigenereMenuItemActionPerformed
        vigenereDialog();
    }//GEN-LAST:event_vigenereMenuItemActionPerformed

    private void saveInputMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveInputMenuItemActionPerformed
        try {
            saveToFile(inputTextField);
        } catch (IOException ex) {
            Logger.getLogger(SimpleEncryption.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveInputMenuItemActionPerformed

    private void caesarMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caesarMenuItemActionPerformed
        caesarDialog();
    }//GEN-LAST:event_caesarMenuItemActionPerformed

    private void loadFromFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFromFileMenuItemActionPerformed
        loadFromFile(inputTextField);
    }//GEN-LAST:event_loadFromFileMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void inputMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputMenuItemActionPerformed
        final ChartPanel chartPanel = new ChartPanel(Histogram.getChart
            (Cipher.getFrequenciesMap(inputTextField.getText()),"InputText"));
        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
        createDialog(chartPanel, "Histogram");
    }//GEN-LAST:event_inputMenuItemActionPerformed

    private void outputMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputMenuItemActionPerformed
        final ChartPanel chartPanel = new ChartPanel(Histogram.getChart
            (Cipher.getFrequenciesMap(outputTextField.getText()),"OutputText"));
        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
        createDialog(chartPanel, "Histogram");
    }//GEN-LAST:event_outputMenuItemActionPerformed

    private void saveOutputMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveOutputMenuItemActionPerformed
        try {
            saveToFile(outputTextField);
        } catch (IOException ex) {
            Logger.getLogger(SimpleEncryption.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveOutputMenuItemActionPerformed

    private void bothMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bothMenuItemActionPerformed
        ArrayList<Map<Character,Double>> maps = new ArrayList<>();
        ArrayList<String> categories = new ArrayList<>();     
        maps.add(Cipher.getFrequenciesMap(inputTextField.getText()));
        maps.add(Cipher.getFrequenciesMap(outputTextField.getText()));  
        categories.add("InputText");
        categories.add("OutputText");  
        ChartPanel chartPanel = new ChartPanel(Histogram.getChart(maps,categories));
        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
        createDialog(chartPanel, "Histogram");
    }//GEN-LAST:event_bothMenuItemActionPerformed

    private void frequencyAnalasysMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frequencyAnalasysMenuItemActionPerformed
        outputTextField.setText(Cipher.freqAnalasys(inputTextField.getText()));        
    }//GEN-LAST:event_frequencyAnalasysMenuItemActionPerformed

    private void frequencyAnalasysCaesarMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frequencyAnalasysCaesarMenuItemActionPerformed
        outputTextField.setText(Cipher.freqAnalasysCaesar(inputTextField.getText()));       
    }//GEN-LAST:event_frequencyAnalasysCaesarMenuItemActionPerformed

    private void vigenereKeyLengthMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vigenereKeyLengthMenuItemActionPerformed
         JOptionPane.showMessageDialog(this, "Vigenere key length:"+
                 Cipher.estimateKeyLength(inputTextField.getText()));
    }//GEN-LAST:event_vigenereKeyLengthMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimpleEncryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimpleEncryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimpleEncryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimpleEncryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new SimpleEncryption().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(SimpleEncryption.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem bothMenuItem;
    private javax.swing.JMenuItem caesarMenuItem;
    private javax.swing.JMenu charFrequencyMenu;
    private javax.swing.JMenu decodeMenu;
    private javax.swing.JMenu encodeDecodeMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem frequencyAnalasysCaesarMenuItem;
    private javax.swing.JMenuItem frequencyAnalasysMenuItem;
    private javax.swing.JMenuItem inputMenuItem;
    private javax.swing.JScrollPane inputScrollPane;
    private javax.swing.JTextPane inputTextField;
    private javax.swing.JMenuItem loadFromFileMenuItem;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JMenu menu;
    private javax.swing.JMenuItem outputMenuItem;
    private javax.swing.JScrollPane outputScrollPane;
    private javax.swing.JTextPane outputTextField;
    private javax.swing.JMenuItem saveInputMenuItem;
    private javax.swing.JMenuItem saveOutputMenuItem;
    private javax.swing.JMenu saveToFileMenu;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JMenu textMenu;
    private javax.swing.JMenuItem vigenereKeyLengthMenuItem;
    private javax.swing.JMenuItem vigenereMenuItem;
    // End of variables declaration//GEN-END:variables

    private void setIcon() throws IOException {
        setIconImage(ImageIO.read( ClassLoader.getSystemResource( "resources/icons/frame_icon.png" ) ));
    }

    private void loadFromFile(JTextPane textPane){
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String filename = selectedFile.getAbsolutePath();
            try {
                inputTextField.read(new BufferedReader(new FileReader(filename)), filename);
            } catch (IOException ex) {
                Logger.getLogger(SimpleEncryption.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void saveToFile(JTextPane textPane) throws IOException {
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");   

        int userSelection = fileChooser.showSaveDialog(null);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            
            String filename = fileToSave.getAbsolutePath();
            textPane.write(new BufferedWriter(new FileWriter(filename)));
            
        }
    }

    private void createDialog(Container container, String title) {
        JDialog dialog = new JDialog(this,title);
        dialog.setModal(true);
        dialog.add(container);
        dialog.pack();
        dialog.setVisible(true);         // TODO add your handling code here:
    }

    private void caesarDialog() {
        Object[] options = { "Encode", "Decode",
                    "Cancel" };
        JPanel panel = new JPanel();
        panel.add(new JLabel("Enter Key(Shift) between 0 and 255"));
        JTextField shiftTextField = new JTextField(3);
        panel.add(shiftTextField);
        int result = JOptionPane.showOptionDialog(null, panel,
                "Caesar chiper (encrypt/decrypt)",
                JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE,
                null, options, null);
        switch(result){
            case 0:
               outputTextField.setText(Cipher.caesarEncode(inputTextField.getText(),
                       Integer.parseInt(shiftTextField.getText())));
            break;
            case 1:
               outputTextField.setText(Cipher.caesarDecode(inputTextField.getText(),
                       Integer.parseInt(shiftTextField.getText())));
            break;
        }
    }
    
    private void vigenereDialog() {
        Object[] options = { "Encode", "Decode",
                    "Cancel" };
        JPanel panel = new JPanel();
        panel.add(new JLabel("Enter Key(word):"));
        JTextField shiftTextField = new JTextField(10);
        panel.add(shiftTextField);
        int result = JOptionPane.showOptionDialog(null, panel, 
                "Vigenere chiper (encrypt/decrypt)",
                JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE,
                null, options, null);
        switch(result){
            case 0:
               outputTextField.setText(Cipher.vigenereEncode(inputTextField.getText(),
                       shiftTextField.getText()));
            break;
            case 1:
               outputTextField.setText(Cipher.vigenereDecode(inputTextField.getText(),
                       shiftTextField.getText()));
            break;
        }
    }
}
